{"version":3,"sources":["reducers/index.js","apis/jsonplaceholder.js","actions/index.js","components/UserHeader.js","components/PostList.js","components/App.js","index.js"],"names":["combineReducers","posts","action","type","payload","users","axios","create","baseURL","fetchPosts","dispatch","getState","a","jsonplaceholder","get","response","data","console","log","fetchUser","id","UserHeader","this","props","user","name","React","Component","connect","state","ownProps","find","PostList","componentDidMount","fetchPostsAndUsers","renderList","map","post","className","title","body","userId","Set","forEach","add","App","ReactDOM","render","store","createStore","reducers","applyMiddleware","thunk","document","querySelector"],"mappings":"kOAiBeA,cAAgB,CAC3BC,MAhBiB,WAAoB,IAAnBA,EAAkB,uDAAZ,GAAGC,EAAS,uCACpC,MAAiB,gBAAdA,EAAOC,KACHD,EAAOE,QACPH,GAcPI,MAXgB,WAAoB,IAAnBA,EAAkB,uDAAZ,GAAGH,EAAS,uCAC7B,MAAiB,eAAdA,EAAOC,KAEA,GAAN,mBAAWE,GAAX,CAAiBH,EAAOE,UAErBC,K,4DCVFC,E,OAAAA,EAAMC,OAAO,CACxBC,QAAQ,yCCgBNC,EAAa,WAEf,8CAAO,WAAOC,EAASC,GAAhB,eAAAC,EAAA,+EACwBC,EAAgBC,IAAI,SAAU,IADtD,OACOC,EADP,OAGHL,EAAS,CAACP,KAAK,cAAcC,QAAQW,EAASC,OAH3C,gDAKCC,QAAQC,IAAR,MALD,iEAAP,yDAUEC,EAAY,SAACC,GACf,8CAAO,WAAOV,EAASC,GAAhB,eAAAC,EAAA,+EAEwBC,EAAgBC,IAAI,UAAUM,GAFtD,OAEOL,EAFP,OAICL,EAAS,CAACP,KAAK,aAAaC,QAAQW,EAASC,OAJ9C,gDAQCC,QAAQC,IAAR,MARD,yDAAP,yDC5BEG,E,uKAOE,OAAIC,KAAKC,MAAMC,KAEX,8BAAMF,KAAKC,MAAMC,KAAKC,OAFC,S,GAPVC,IAAMC,WAiBhBC,eAJS,SAACC,EAAMC,GAEzB,MAAO,CAACN,KADGK,EAAMxB,MAAM0B,MAAK,SAAAP,GAAI,OAAEA,EAAKJ,KAAKU,EAASV,SAG5CQ,CAAyBP,GChBlCW,E,4MAGFC,kBAAoB,WACV,EAAKV,MAAMW,sB,EAErBC,WAAa,WACT,OAAO,EAAKZ,MAAMtB,MAAMmC,KAAI,SAAAC,GACxB,OACM,sBAAKC,UAAU,OAAf,UACI,mBAAGA,UAAU,mCACb,sBAAKA,UAAU,UAAf,UACI,sBAAKA,UAAU,cAAf,UACI,6BAAKD,EAAKE,QACV,4BAAIF,EAAKG,UAEd,cAAC,EAAD,CAAYpB,GAAIiB,EAAKI,cAPDJ,EAAKjB,Q,uDAgB1C,OACK,qBAAKkB,UAAU,0BAAf,SAA0ChB,KAAKa,mB,GA1BrCT,IAAMC,WAkCdC,eAHS,SAACC,GACrB,MAAO,CAAC5B,MAAM4B,EAAM5B,SAEe,CAACiC,mBFpCN,WAC9B,8CAAO,WAAOxB,EAASC,GAAhB,iBAAAC,EAAA,sEACGF,EAASD,KADZ,OAEGR,EAAQU,IAAWV,MACnBI,EAAQ,IAAIqC,IAClBzC,EAAM0C,SAAQ,SAAAN,GACVhC,EAAMuC,IAAIP,EAAKI,WAGnBpC,EAAMsC,SAAQ,SAAAnB,GACVd,EAASS,EAAUK,OATpB,2CAAP,0DEmCWI,CAA8CI,GCxB9Ca,E,uKARP,OACI,qBAAKP,UAAU,eAAf,SACI,cAAC,EAAD,U,GAPEZ,IAAMC,WCOxBmB,IAASC,OAAO,cAAC,IAAD,CAAUC,MAAOC,YAAYC,EAASC,YAAgBC,MAAtD,SAA+D,cAAC,EAAD,MAC3EC,SAASC,cAAc,Y","file":"static/js/main.53512ac4.chunk.js","sourcesContent":["import {combineReducers} from \"redux\";\n\nconst postsReducer = (posts=[],action)=>{\n    if(action.type===\"FETCH_POSTS\")\n    return action.payload;\n    return posts;\n}\n\nconst userReducer = (users=[],action)=>{\n          if(action.type===\"FETCH_USER\")\n          {\n              return [...users,action.payload];\n          }\n          return users;\n}\n\n\nexport default combineReducers({\n    posts:postsReducer,\n    users:userReducer\n})","import axios from 'axios';\n\n\nexport default axios.create({\n    baseURL:\"https://jsonplaceholder.typicode.com\"\n});","import jsonplaceholder from '../apis/jsonplaceholder';\n\n\n\nexport const fetchPostsAndUsers = ()=>{\n    return async (dispatch,getState) =>{\n        await dispatch(fetchPosts());\n        const posts = getState().posts; \n        const users = new Set();\n        posts.forEach(post => {\n            users.add(post.userId);\n            \n        });\n        users.forEach(user=>{\n            dispatch(fetchUser(user));\n        })\n\n\n    }\n}\nconst fetchPosts = () => {\n\n    return async (dispatch,getState) => {\n        try{const response = await jsonplaceholder.get('/posts', {});\n         //console.log(response);\n        dispatch({type:\"FETCH_POSTS\",payload:response.data})}\n        catch(e){\n            console.log(e);\n        };\n    }\n}\n\nconst fetchUser = (id)=>{\n    return async (dispatch,getState) =>{\n        try{\n            const response = await jsonplaceholder.get('/users/'+id);\n           // console.log(response.data);\n            dispatch({type:\"FETCH_USER\",payload:response.data});\n        }\n        catch(e)\n        {\n            console.log(e);\n        }\n    }\n}","import React from 'react';\nimport {connect} from 'react-redux';\n\n\n\nclass UserHeader extends React.Component{\n\n\n    \n\n    render(){\n        \n        if(!this.props.user)return null;\n        return(\n            <div>{this.props.user.name}</div>\n        );\n    }\n}\nconst mapStateToProps = (state,ownProps)=>{\n    const user = state.users.find(user=>user.id===ownProps.id);\n      return {user}\n}\nexport default connect(mapStateToProps)(UserHeader);","import React from 'react';\nimport {connect} from 'react-redux';\n\n\nimport {fetchPostsAndUsers} from '../actions';\nimport UserHeader from './UserHeader';\nclass PostList extends React.Component{\n\n\n    componentDidMount = ()=>{\n              this.props.fetchPostsAndUsers();\n    }\n    renderList = ()=>{\n        return this.props.posts.map(post=>{\n            return(\n                  <div className=\"item\" key={post.id}>\n                      <i className=\"large middle aligned icon user\"/>\n                      <div className=\"content\">\n                          <div className=\"description\">\n                              <h2>{post.title}</h2>\n                              <p>{post.body}</p>\n                          </div>\n                         <UserHeader id={post.userId}/> \n                      </div>\n\n                  </div>\n            );\n        })\n    }\n    render(){\n       // console.log(this.props);\n        return(\n             <div className=\"ui relaxed divided list\">{this.renderList()}</div>\n        );\n    }\n}\n\nconst mapStateToProps = (state)=>{\n    return {posts:state.posts};\n}\nexport default connect(mapStateToProps,{fetchPostsAndUsers})(PostList);","import React from 'react';\nimport PostList from './PostList';\n\nclass App extends React.Component{\n\n\n    \n    render(){\n        return(\n            <div className=\"ui container\">\n                <PostList/>\n                </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { createStore ,applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\n\nimport reducers from \"./reducers\";\nimport App from './components/App';\n\n\nReactDOM.render(<Provider store={createStore(reducers,applyMiddleware(thunk))}><App /></Provider>,\n    document.querySelector(\"#root\"));"],"sourceRoot":""}